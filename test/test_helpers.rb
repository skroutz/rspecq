require "minitest/autorun"
require "securerandom"
require "rspecq"

module TestHelpers
  REDIS_OPTS = { host: "127.0.0.1" }.freeze
  EXEC_CMD = "bundle exec rspecq".freeze

  def rand_id
    SecureRandom.hex(4)
  end

  def new_worker(path)
    w = RSpecQ::Worker.new(
      build_id: rand_id,
      worker_id: rand_id,
      redis_opts: REDIS_OPTS
    )
    w.files_or_dirs_to_run = suite_path(path)
    w
  end

  # Executes an rspecq worker.
  # @param [String] path The name of the test suite
  # @param [String] args Extra rspeq arguments
  # @param [String] :build_id By default build_id is generated by the method.
  #   Alternatively you can pass the build_id in case you need to share it
  #   with the reporter.
  # @return [RSpecQ::Queue]
  def exec_build(path, args = "", build_id: nil, worker_id: nil)
    worker_id ||= rand_id
    build_id ||= rand_id

    Dir.chdir(suite_path(path)) do
      out = `#{EXEC_CMD} --worker #{worker_id} --build #{build_id} #{args}`
      puts out if ENV["RSPECQ_DEBUG"]
    end

    assert_equal 0, $?.exitstatus

    queue = RSpecQ::Queue.new(build_id, worker_id, REDIS_OPTS)
    assert_queue_well_formed(queue)

    queue
  end

  # Spawns an rspecq worker in a different process.
  def start_worker(path, args = "", build_id: nil, worker_id: nil)
    worker_id ||= rand_id
    build_id ||= rand_id

    # Exec in a different process
    pid = Process.spawn(
      "#{EXEC_CMD} --worker #{worker_id} --build #{build_id} #{args}",
      chdir: suite_path(path),
      out: (ENV["RSPECQ_DEBUG"] ? :out : File::NULL)
    )

    queue = RSpecQ::Queue.new(build_id, worker_id, REDIS_OPTS)

    [pid, queue]
  end

  # Executes an rspecq reporter.
  # @param [String] :build_id By default build_id is generated by the method.
  # @return [String] The reporter's output.
  def exec_reporter(build_id:)
    out = `#{EXEC_CMD} --report --build #{build_id}`
    puts out if ENV["RSPECQ_DEBUG"]
    out
  end

  def suite_path(path)
    File.join("test", "sample_suites", path)
  end

  # Supresses stdout of the code provided in the block
  def silent
    if ENV["RSPECQ_DEBUG"]
      yield
      return
    end

    begin
      orig = $stdout.clone
      $stdout.reopen(File::NULL, "w")
      yield
    ensure
      $stdout.reopen(orig)
    end
  end
end

require_relative "test_helpers/rspecq_test"
